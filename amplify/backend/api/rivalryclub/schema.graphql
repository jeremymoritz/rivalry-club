# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = {allow: public}
} # FOR TESTING ONLY!
type Contest @model {
  id: ID!
  rivalryId: ID! @index(name: "byRivalry", sortKeyFields: ["id"])
  tierSlotAId: ID! @index(name: "byTierSlotA", sortKeyFields: ["id"])
  tierSlotBId: ID! @index(name: "byTierSlotB", sortKeyFields: ["id"])
  result: Int
  bias: Int

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  deletedAt: AWSDateTime
}

type Fighter @model {
  id: ID!
  name: String!
  gameId: ID! @index(name: "byGame", sortKeyFields: ["id"])

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!

  tierSlots: [TierSlot] @hasMany(indexName: "byFighter", fields: ["id"])
}

type Game @model {
  id: ID!
  name: String!

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  deletedAt: AWSDateTime

  fighters: [Fighter] @hasMany(indexName: "byGame", fields: ["id"])
  rivalries: [Rivalry] @hasMany(indexName: "byGame", fields: ["id"])
}

type Rivalry @model {
  id: ID!
  userAId: ID! @index(name: "byUserA", sortKeyFields: ["id"])
  userBId: ID! @index(name: "byUserB", sortKeyFields: ["id"])
  gameId: ID! @index(name: "byGame", sortKeyFields: ["id"])

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  deletedAt: AWSDateTime

  contests: [Contest] @hasMany(indexName: "byRivalry", fields: ["id"])
  tierLists: [TierList] @hasMany(indexName: "byRivalry", fields: ["id"])
}

type TierList @model {
  id: ID!
  rivalryId: ID! @index(name: "byRivalry", sortKeyFields: ["id"])
  userId: ID! @index(name: "byUser", sortKeyFields: ["id"])
  standing: Int

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  deletedAt: AWSDateTime

  tierSlots: [TierSlot] @hasMany(indexName: "byTierList", fields: ["id"])
}

type TierSlot @model {
  id: ID!
  tierListId: ID! @index(name: "byTierList", sortKeyFields: ["id"])
  fighterId: ID! @index(name: "byFighter", sortKeyFields: ["id"])
  position: Int

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  deletedAt: AWSDateTime
}

type User @model {
  id: ID!
  email: String!
  firstName: String
  lastName: String
  role: Int!
  awsSub: String

  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
  deletedAt: AWSDateTime

  rivalriesA: [Rivalry] @hasMany(indexName: "byUserA", fields: ["id"])
  rivalriesB: [Rivalry] @hasMany(indexName: "byUserB", fields: ["id"])
  tierLists: [TierList] @hasMany(indexName: "byUser", fields: ["id"])
}
